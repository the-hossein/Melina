import Head from "next/head";
import { useTranslation } from "react-i18next";
import { useSelector } from "react-redux";
import callApi from "../../../src/api/callApi";
import {
  GET_COURSE,
  GET_COURSE_HEADLINE,
  GET_HEADLINE,
  GET_RELATED_COURSE
} from "../../../src/api/urls";
import CourseDetail from "../../../src/components/courses/CourseDetail";
import Footer from "../../../src/components/footer/Footer";
import Placement from "../../../src/tools/placement/Placement";

export default function DetailCoursesPage({
  course,
  headline,
  similar,
  headlineCourse
}) {
  const { t } = useTranslation();

  const lang = useSelector((state) => state.stateLang.lng);
  return (
    <div>
      <Head>
        <title>{lang === "fa" ? course.data.title : course.data.titleEn}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {course.data.length === 0 ? (
          <Placement text={t("notFoundCourse")} />
        ) : (
          <CourseDetail
            data={course.data}
            headline={headline.data}
            type="headline"
            similar={similar.data}
            // headlineCourse={headlineCourse.data}
          />
        )}
      </main>
      <Footer />
    </div>
  );
}
export async function getServerSideProps(context) {
  const { params } = context;
  const { detailCourse } = params;
  const { headline } = params;
  const data = await callApi(
    `${GET_COURSE}?CourseId=${detailCourse}`,
    false,
    "{}",
    "GET"
  );
  //   چون به صورت پیشفرض وقتی روی هر دوره که از صفحه های دیگه میاد بزنه باید فصل اول که پریویو هست رو نشون بده .این ای پی آی تو صفحه بعدیش به صورت داینامیک با پارامس هندل میشه
  const headlineCourse = await callApi(
    `${GET_HEADLINE}?HeadlineId=1`,
    false,
    "{}",
    "GET"
  );
  const headlines = await callApi(
    `${GET_COURSE_HEADLINE}?CourseId=${detailCourse}`,
    false,
    "{}",
    "GET"
  );
  const similar = await callApi(
    `${GET_RELATED_COURSE}?Lable=${data.data.lable}`,
    false,
    "{}",
    "GET"
  );
  return {
    props: {
      course: data,
      headline: headlines,
      similar: similar,
      headlineCourse: headlineCourse
    }
  };
}
